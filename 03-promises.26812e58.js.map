{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,gBAAiBF,SAASC,cAAc,kBACxCE,eAAgBH,SAASC,cAAc,iBACvCG,OAAQJ,SAASC,cAAc,oBAE7BI,EAAS,GAMb,SAASC,EAAcC,EAAUC,GAChC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDG,EAAK,sBAAqCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,SAEnDA,MAZPV,EAAKC,KAAKkB,iBAAiB,SAiB3B,SAAqBC,GACnBb,EAAOa,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,MACjCC,QAAQC,IAAIlB,MAlBdP,EAAKC,KAAKkB,iBAAiB,UAqB3B,SAA0BC,GACxBA,EAAEM,iBAKJ,SAAeC,G,IAAEjB,EAAFiB,EAAEjB,MAAOkB,EAATD,EAASC,KAAMtB,EAAfqB,EAAerB,OACxBG,EAAW,EACf,IAAKoB,EAAI,EAAGA,EAAIvB,EAAQuB,GAAK,EAE3BrB,EADAC,GAAY,EACYC,GACrBoB,MAAK,SAAAlB,GACJmB,EAAAjC,GAASkC,OAAOC,QAAQrB,MAEzBsB,OAAM,SAAAC,GACLJ,EAAAjC,GAASkC,OAAOI,QAAQD,MAE5BzB,EAAQ2B,OAAO3B,GAAS2B,OAAOT,GAfjCU,CAAM/B,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelayInput: document.querySelector('[name=\"delay\"]'),\n  delayStepInput: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\nlet values = {};\n\n\nrefs.form.addEventListener('input', inputValues);\nrefs.form.addEventListener('submit', onSubmitBtnClick);\n\nfunction createPromise(position, delay) {\n return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n \n}\n\nfunction inputValues(e) {\n  values[e.target.name] = e.target.value;\n  console.log(values);\n}\n\nfunction onSubmitBtnClick(e) {\n  e.preventDefault();\n  start(values);\n  \n}\n\nfunction start({ delay, step, amount }) {\n  let position = 0;\n  for (i = 0; i < amount; i += 1) {\n    position += 1;\n    createPromise(position, delay)\n      .then(resolve => {\n        Notiflix.Notify.success(resolve);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(error);\n      });\n    delay = Number(delay) + Number(step);\n  }\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelayInput","delayStepInput","amount","$ce04d3a99e08e73b$var$values","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","e","target","name","value","console","log","preventDefault","param","step","i","then","$parcel$interopDefault","Notify","success","catch","error","failure","Number","$ce04d3a99e08e73b$var$start"],"version":3,"file":"03-promises.26812e58.js.map"}